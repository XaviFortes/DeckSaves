name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-release:
    name: Build Release (${{ matrix.platform }})
    needs: prepare-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'self-hosted macOS ARM64'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
          - platform: 'self-hosted Windows X64'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    continue-on-error: ${{ contains(matrix.platform, 'Windows') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Update version in Cargo.toml files
        run: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          
          # Update version in all Cargo.toml files
          sed -i.bak "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          sed -i.bak "s/^version = \".*\"/version = \"$VERSION\"/" core/Cargo.toml
          sed -i.bak "s/^version = \".*\"/version = \"$VERSION\"/" cli/Cargo.toml
          sed -i.bak "s/^version = \".*\"/version = \"$VERSION\"/" tauri-ui/Cargo.toml

      - name: Update version in package.json
        run: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          VERSION=${VERSION#v}
          npm version $VERSION --no-git-tag-version

      - name: Update version in tauri.conf.json
        run: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          VERSION=${VERSION#v}
          cd tauri-ui
          npm version $VERSION --no-git-tag-version
          # Update tauri.conf.json
          sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" tauri.conf.json

      - name: Build CLI
        run: |
          cd cli
          cargo build --release --target ${{ matrix.target }}

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          projectPath: './tauri-ui'
          tagName: ${{ needs.prepare-release.outputs.version }}
          releaseName: 'DeckSaves ${{ needs.prepare-release.outputs.version }}'
          releaseBody: |
            ## What's Changed
            ${{ needs.prepare-release.outputs.changelog }}
            
            ## Installation
            
            ### Desktop App
            - **Windows**: Download and run the `.msi` installer
            - **macOS**: Download and install the `.dmg` file
            - **Linux**: Download and install the `.deb` package or use the `.AppImage`
            
            ### CLI Tool
            Download the CLI binary for your platform and add it to your PATH.
            
            ## Checksums
            SHA256 checksums will be provided in the release assets.
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

      - name: Generate checksums (Unix)
        if: ${{ !contains(matrix.platform, 'Windows') }}
        run: |
          cd target/${{ matrix.target }}/release
          sha256sum game-sync > game-sync-${{ matrix.target }}.sha256

      - name: Generate checksums (Windows)
        if: ${{ contains(matrix.platform, 'Windows') }}
        run: |
          cd target/${{ matrix.target }}/release
          certutil -hashfile game-sync.exe SHA256 > game-sync-${{ matrix.target }}.sha256

      - name: Upload CLI with checksums
        uses: actions/upload-artifact@v4
        with:
          name: game-sync-cli-${{ matrix.target }}-${{ needs.prepare-release.outputs.version }}
          path: |
            target/${{ matrix.target }}/release/game-sync*
          retention-days: 90
          if-no-files-found: warn

  publish-crates:
    name: Publish to crates.io
    needs: [prepare-release, build-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Update versions
        run: |
          VERSION=${{ needs.prepare-release.outputs.version }}
          VERSION=${VERSION#v}
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" core/Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" cli/Cargo.toml

      - name: Publish core crate
        run: |
          cd core
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true

      - name: Wait for core crate to be available
        run: sleep 30

      - name: Publish CLI crate
        run: |
          cd cli
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true

  docker-build:
    name: Build Docker Images
    needs: [prepare-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/decksaves
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cli/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
