name: Build DeckSaves

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
jobs:
  test:
    name: Test Suite
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ./
            ./core
            ./cli
            ./tauri-ui

      - name: Run Rust tests
        run: |
          cd core && cargo test --verbose
          cd ../cli && cargo test --verbose

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm run test:unit || echo "No unit tests configured"

      - name: Check frontend build
        run: npm run build

  build:
    name: Build ${{ matrix.platform }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'macos-arm64'
            labels: ['self-hosted', 'macOS', 'ARM64']
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          # - platform: 'macos-latest'
            # args: '--target x86_64-apple-darwin'
            # target: 'x86_64-apple-darwin'
            # arch: 'x64'
          - name: 'ubuntu-x64'
            labels: ['ubuntu-24.04', 'x64']
            # platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
          - name: 'windows-x64'
            labels: ['self-hosted', 'Windows', 'X64']
            # platform: 'self-hosted Windows X64'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    continue-on-error: ${{ contains(matrix.platform, 'Windows') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          workspaces: |
            ./
            ./core
            ./cli
            ./tauri-ui

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@latest

      - name: Build frontend
        run: npm run build

      - name: Build CLI (Unix)
        if: ${{ !contains(matrix.platform, 'Windows') }}
        run: |
          cd cli
          cargo build --release --target ${{ matrix.target }}

      - name: Build CLI (Windows)
        if: ${{ contains(matrix.platform, 'Windows') }}
        run: |
          cd cli
          cargo build --release --target ${{ matrix.target }}

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: './tauri-ui'
          args: '--verbose ${{ matrix.args }}'

      - name: Debug - List build output (Unix)
        if: ${{ !contains(matrix.platform, 'Windows') }}
        run: |
          echo "Contents of target/release/bundle:"
          find target -name "*.dmg" -o -name "*.app" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.exe" 2>/dev/null || echo "No bundle files found"
          echo "Contents of target:"
          find target -name "game-sync*" 2>/dev/null || echo "No CLI files found"

      - name: Debug - List build output (Windows)
        if: ${{ contains(matrix.platform, 'Windows') }}
        run: |
          echo "Contents of target directory:"
          Get-ChildItem -Path target -Recurse | Select-Object FullName | Format-Table -HideTableHeaders
          echo "Looking for specific files:"
          if (Test-Path "target\release\game-sync.exe") { echo "Found: target\release\game-sync.exe" } else { echo "Not found: target\release\game-sync.exe" }
          if (Test-Path "target\x86_64-pc-windows-msvc\release\game-sync.exe") { echo "Found: target\x86_64-pc-windows-msvc\release\game-sync.exe" } else { echo "Not found: target\x86_64-pc-windows-msvc\release\game-sync.exe" }

      - name: Upload CLI artifacts (Unix)
        if: ${{ !contains(matrix.platform, 'Windows') }}
        uses: actions/upload-artifact@v4
        with:
          name: game-sync-cli-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/game-sync
          retention-days: 30
          if-no-files-found: warn

      - name: Upload CLI artifacts (Windows)
        if: ${{ contains(matrix.platform, 'Windows') }}
        uses: actions/upload-artifact@v4
        with:
          name: game-sync-cli-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/game-sync.exe
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Tauri artifacts (macOS)
        if: ${{ contains(matrix.platform, 'macOS') || matrix.platform == 'macos-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: decksaves-macos-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            target/${{ matrix.target }}/release/bundle/macos/*.app
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Tauri artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: decksaves-linux-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/bundle/deb/*.deb
            target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Tauri artifacts (Windows)
        if: ${{ contains(matrix.platform, 'Windows') }}
        uses: actions/upload-artifact@v4
        with:
          name: decksaves-windows-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/bundle/msi/*.msi
            target/${{ matrix.target }}/release/bundle/nsis/*.exe
          retention-days: 30
          if-no-files-found: warn

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo-audit
        run: cargo audit

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
